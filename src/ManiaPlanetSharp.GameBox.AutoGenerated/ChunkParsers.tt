<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="$(TargetDir)ManiaPlanetSharp.GameBox.AutoGenerationHelper.dll" #>
<#@ assembly name="$(TargetDir)ManiaPlanetSharp.dll" #>
<#@ assembly name="$(ProjectDir)..\packages\AgileObjects.ReadableExpressions.2.3.2\lib\netstandard1.0\AgileObjects.ReadableExpressions.dll" #>
<#@ assembly name="$(ProjectDir)..\packages\AgileObjects.NetStandardPolyfills.1.4.0\lib\netstandard1.0\AgileObjects.NetStandardPolyfills.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ManiaPlanetSharp.GameBox" #>
<#@ import namespace="ManiaPlanetSharp.GameBox.Parsing" #>
<#@ import namespace="ManiaPlanetSharp.GameBox.Parsing.ParserGeneration" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using ManiaPlanetSharp.GameBox.Parsing.Chunks;

namespace ManiaPlanetSharp.GameBox.Parsing.ParserGeneration.AutoGenerated
{
	public static partial class AutoGeneratedParsers
	{
		public static Dictionary<Type, IParser<Chunk>> ChunkParsers { get; } = new Dictionary<Type, IParser<Chunk>> {
<#
var assemblies = AppDomain.CurrentDomain.GetAssemblies().Where(p => !p.IsDynamic);
var chunkTypes = assemblies.SelectMany(a => a.GetExportedTypes().Where(t => t != typeof(Chunk) && typeof(Chunk).IsAssignableFrom(t)));
foreach (var chunkType in chunkTypes)
{
#>			{ typeof(<#= chunkType #>), new <#= chunkType.Name #>Parser() },
<#
}
#>
		};
	}


<#
foreach (var chunkType in chunkTypes)
{
	string code = (string)typeof(ParserCodeGenerator).GetMethod(nameof(ParserCodeGenerator.GenerateChunkParserCode), BindingFlags.Static | BindingFlags.Public).MakeGenericMethod(chunkType).Invoke(null, null);
	List<uint> ids = (List<uint>)typeof(ParserCodeGenerator).GetMethod(nameof(ParserCodeGenerator.GetParserChunkIds), BindingFlags.Static | BindingFlags.Public).MakeGenericMethod(chunkType).Invoke(null, null);
#>

	public class <#= chunkType.Name #>Parser
		: PregeneratedChunkParser<<#= chunkType #>>
	{
		public override List<uint> ParseableIds => new List<uint>() { <#= string.Join(", ", ids.Select(i => $"0x{i:X8}")) #> };

        public override <#= chunkType #> Parse(GameBoxReader reader)
        {
<#= string.Join(Environment.NewLine, code/*.Replace(chunkType.Name, chunkType.FullName)*/.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Select(line => $"\t\t\t{line}")) #>
        }
	}
<#
}
#>
}
