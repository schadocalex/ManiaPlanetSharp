using System;
using System.Collections.Generic;
using ManiaPlanetSharp.GameBox.Parsing.Chunks;

namespace ManiaPlanetSharp.GameBox.Parsing.ParserGeneration.AutoGenerated
{
	public static partial class AutoGeneratedParsers
	{
		public static Dictionary<Type, IParser<Chunk>> ChunkParsers { get; } = new Dictionary<Type, IParser<Chunk>> {
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.CheckpointsChunk), new CheckpointsChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.MapChunk), new MapChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectAnchorChunk), new ObjectAnchorChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectBannerProfileChunk), new ObjectBannerProfileChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectCameraIndexChunk), new ObjectCameraIndexChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectGroundPointChunk), new ObjectGroundPointChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectModelChunk), new ObjectModelChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectTypeChunk), new ObjectTypeChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectUsabilityChunk), new ObjectUsabilityChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.BlockSkinChunk), new BlockSkinChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModelChunk), new VisualModelChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel1Chunk), new VisualModel1ChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel2Chunk), new VisualModel2ChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel3Chunk), new VisualModel3ChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.WaypointSpecialPropertyChunk), new WaypointSpecialPropertyChunkParser() },
		};
	}



	public class CheckpointsChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.CheckpointsChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x03043017 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.CheckpointsChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new CheckpointsChunk();
			result.Id = chunkId;
			var CheckpointsArrayLength = reader.ReadUInt32();
			result.Checkpoints = new Checkpoint[(int)CheckpointsArrayLength];
			var iCheckpoints = 0;
			while (true)
			{
			    if (iCheckpoints < CheckpointsArrayLength)
			    {
			        result.Checkpoints[(int)iCheckpoints] = ParserFactory.GetCustomStructParser<Checkpoint>().Parse(reader);
			        ++iCheckpoints;
			    }
			    else
			    {
			        break;
			    }
			}
			return result;
        }
	}

	public class MapChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.MapChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x0304301F };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.MapChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new MapChunk();
			result.Id = chunkId;
			result.Uid = reader.ReadLookbackString();
			result.Environment = reader.ReadLookbackString();
			result.Author = reader.ReadLookbackString();
			result.Name = reader.ReadString();
			result.TimeOfDay = reader.ReadLookbackString();
			result.DecorationEnvironment = reader.ReadLookbackString();
			result.DecorationEnvironmentAuthor = reader.ReadLookbackString();
			result.Size = reader.ReadSize3D();
			result.NeedsUnlock = reader.ReadBool();
			result.Version = reader.ReadUInt32();
			result.Blocks = result.ParseBlocks(reader);
			return result;
        }
	}

	public class ObjectAnchorChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectAnchorChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E002017 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectAnchorChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new ObjectAnchorChunk();
			result.Id = chunkId;
			result.Version = reader.ReadInt32();
			result.IsFreelyAnchorable = reader.ReadBool();
			return result;
        }
	}

	public class ObjectBannerProfileChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectBannerProfileChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E002010 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectBannerProfileChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new ObjectBannerProfileChunk();
			result.Id = chunkId;
			result.BannerProfile = reader.ReadFileReference();
			return result;
        }
	}

	public class ObjectCameraIndexChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectCameraIndexChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E002006 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectCameraIndexChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new ObjectCameraIndexChunk();
			result.Id = chunkId;
			result.DefaultCameraIndex = reader.ReadUInt32();
			return result;
        }
	}

	public class ObjectGroundPointChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectGroundPointChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E002012 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectGroundPointChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new ObjectGroundPointChunk();
			result.Id = chunkId;
			result.GroundPoint = reader.ReadVec3D();
			result.PainterGroundMargin = reader.ReadFloat();
			result.OrbitalCenterHeightFromGround = reader.ReadFloat();
			result.OrbitalRadiusBase = reader.ReadFloat();
			result.OrbitalPreviewAngle = reader.ReadFloat();
			return result;
        }
	}

	public class ObjectModelChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectModelChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E002019 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectModelChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new ObjectModelChunk();
			result.Id = chunkId;
			result.Version = reader.ReadInt32();
			result.PhysicalModel = reader.ReadNodeReference();
			result.VisualModel = reader.ReadNodeReference();
			if (result.Version == ((int)1))
			{
			    result.VisualModelStatic = reader.ReadNodeReference();
			}
			return result;
        }
	}

	public class ObjectTypeChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectTypeChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E002015 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectTypeChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new ObjectTypeChunk();
			result.Id = chunkId;
			result.ObjectTypeU = reader.ReadUInt32();
			return result;
        }
	}

	public class ObjectUsabilityChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectUsabilityChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E002018 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.ObjectUsabilityChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new ObjectUsabilityChunk();
			result.Id = chunkId;
			result.Version = reader.ReadInt32();
			result.IsUsable = reader.ReadBool();
			return result;
        }
	}

	public class BlockSkinChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.BlockSkinChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x03059000, 0x03059001, 0x03059002 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.BlockSkinChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new BlockSkinChunk();
			result.Id = chunkId;
			if (result.ChunkId == ((uint)0))
			{
			    result.Ignored = reader.ReadString();
			}
			if (result.ChunkId >= ((uint)1))
			{
			    result.Pack = reader.ReadFileReference();
			}
			if (result.ChunkId >= ((uint)2))
			{
			    result.ParentPack = reader.ReadFileReference();
			}
			return result;
        }
	}

	public class VisualModelChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModelChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E007000 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModelChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new VisualModelChunk();
			result.Id = chunkId;
			result.Part1 = reader.ReadNodeReference();
			result.Part2 = reader.ReadNodeReference();
			return result;
        }
	}

	public class VisualModel1ChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel1Chunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E007001 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel1Chunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new VisualModel1Chunk();
			result.Id = chunkId;
			result.Version = reader.ReadInt32();
			if (result.Version == ((int)1))
			{
			    result.Unknown1 = reader.ReadInt32();
			}
			if (result.Version == ((int)1))
			{
			    result.Unknown2 = reader.ReadInt32();
			}
			if (result.Version == ((int)1))
			{
			    result.Unknown3 = reader.ReadFloat();
			}
			if (result.Version >= ((int)9))
			{
			    result.Path1 = reader.ReadString();
			}
			if ((result.Version >= ((int)9)) && (result.Path1 == ((string)null)))
			{
			    result.Unknown4 = reader.ReadNodeReference();
			}
			if (result.Version <= ((int)7))
			{
			    result.Unknown5 = reader.ReadNodeReference();
			}
			if (result.Version < ((int)18))
			{
			    result.Unknown6 = reader.ReadNodeReference();
			}
			if ((result.Version >= ((int)2)) && (result.Version < ((int)9)))
			{
			    result.Path2 = reader.ReadString();
			}
			if ((result.Version >= ((int)2)) && (result.Version < ((int)5)))
			{
			    result.Unknown7Count = reader.ReadInt32();
			}
			if ((result.Version >= ((int)2)) && (result.Version < ((int)5)))
			{
			    result.Unknown7 = new VisualModelStruct1[(int)((uint)result.Unknown7Count)];
			    uint iUnknown7;
			    iUnknown7 = 0;
			    while (true)
			    {
			        if (iUnknown7 < ((uint)result.Unknown7Count))
			        {
			            result.Unknown7[(int)iUnknown7] = ParserFactory.GetCustomStructParser<VisualModelStruct1>().Parse(reader);
			            ++iUnknown7;
			        }
			        else
			        {
			            break;
			        }
			    }
			}
			if (result.Version == ((int)5))
			{
			    result.Unknown8Count = reader.ReadInt32();
			}
			if (result.Version == ((int)5))
			{
			    result.Unknown8 = new Node[(int)((uint)result.Unknown8Count)];
			    uint iUnknown8;
			    iUnknown8 = 0;
			    while (true)
			    {
			        if (iUnknown8 < ((uint)result.Unknown8Count))
			        {
			            result.Unknown8[(int)iUnknown8] = reader.ReadNodeReference();
			            ++iUnknown8;
			        }
			        else
			        {
			            break;
			        }
			    }
			}
			if (result.Version > ((int)5))
			{
			    result.Unknown9 = reader.ReadInt32();
			}
			if (result.Version >= ((int)2))
			{
			    result.Unknown10Count = reader.ReadInt32();
			}
			if (result.Version >= ((int)2))
			{
			    result.Unknown10 = new VisualModelStruct1[(int)((uint)result.Unknown10Count)];
			    uint iUnknown10;
			    iUnknown10 = 0;
			    while (true)
			    {
			        if (iUnknown10 < ((uint)result.Unknown10Count))
			        {
			            result.Unknown10[(int)iUnknown10] = ParserFactory.GetCustomStructParser<VisualModelStruct1>().Parse(reader);
			            ++iUnknown10;
			        }
			        else
			        {
			            break;
			        }
			    }
			}
			if ((result.Version >= ((int)2)) && (result.Version <= ((int)16)))
			{
			    result.Unknown11 = reader.ReadString();
			}
			if ((result.Version >= ((int)2)) && (result.Version <= ((int)16)))
			{
			    result.Unknown12 = reader.ReadString();
			}
			if ((result.Version >= ((int)2)) && (result.Version <= ((int)16)))
			{
			    result.Unknown13 = reader.ReadString();
			}
			if (result.Version >= ((int)10))
			{
			    result.Unknown14 = reader.ReadString();
			}
			if ((result.Version >= ((int)11)) && (result.Unknown14 != ((string)null)))
			{
			    result.Unknown15 = new float[(int)((uint)3)];
			    uint iUnknown15;
			    iUnknown15 = 0;
			    while (true)
			    {
			        if (iUnknown15 < ((uint)3))
			        {
			            result.Unknown15[(int)iUnknown15] = reader.ReadFloat();
			            ++iUnknown15;
			        }
			        else
			        {
			            break;
			        }
			    }
			}
			if (result.Version >= ((int)12))
			{
			    result.Unknown16 = reader.ReadString();
			}
			if ((result.Version >= ((int)12)) && (result.Unknown16 != ((string)null)))
			{
			    result.Unknown17 = reader.ReadInt32();
			}
			if (result.Version == ((int)8))
			{
			    result.Unknown18 = reader.ReadNodeReference();
			}
			if (result.Version >= ((int)13))
			{
			    result.Unknown19Count = reader.ReadInt32();
			}
			if (result.Version >= ((int)13))
			{
			    result.Unknown19 = new VisualModelStruct3[(int)((uint)result.Unknown19Count)];
			    uint iUnknown19;
			    iUnknown19 = 0;
			    while (true)
			    {
			        if (iUnknown19 < ((uint)result.Unknown19Count))
			        {
			            result.Unknown19[(int)iUnknown19] = ParserFactory.GetCustomStructParser<VisualModelStruct3>().Parse(reader);
			            ++iUnknown19;
			        }
			        else
			        {
			            break;
			        }
			    }
			}
			if (result.Version >= ((int)13))
			{
			    result.Unknown20Count = reader.ReadInt32();
			}
			if (result.Version >= ((int)13))
			{
			    result.Unknown20 = new VisualModelStruct4[(int)((uint)result.Unknown20Count)];
			    uint iUnknown20;
			    iUnknown20 = 0;
			    while (true)
			    {
			        if (iUnknown20 < ((uint)result.Unknown20Count))
			        {
			            result.Unknown20[(int)iUnknown20] = ParserFactory.GetCustomStructParser<VisualModelStruct4>().Parse(reader);
			            ++iUnknown20;
			        }
			        else
			        {
			            break;
			        }
			    }
			}
			if (result.Version >= ((int)14))
			{
			    result.Unknown21 = ParserFactory.GetCustomStructParser<VisualModelStruct3>().Parse(reader);
			}
			if (result.Version == ((int)15))
			{
			    result.Unknown22 = reader.ReadString();
			}
			if (result.Version >= ((int)16))
			{
			    result.Unknown23 = reader.ReadNodeReference();
			}
			if (result.Version >= ((int)19))
			{
			    result.Unknown24 = reader.ReadFloat();
			}
			if (result.Version >= ((int)20))
			{
			    result.Unknown25 = ParserFactory.GetCustomStructParser<VisualModelStruct3>().Parse(reader);
			}
			if (result.Version >= ((int)21))
			{
			    result.Unknown26 = reader.ReadFileReference();
			}
			return result;
        }
	}

	public class VisualModel2ChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel2Chunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E007002 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel2Chunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new VisualModel2Chunk();
			result.Id = chunkId;
			result.Version = reader.ReadInt32();
			result.Unknown1 = reader.ReadString();
			result.Unknown2 = reader.ReadString();
			result.Unknown3 = reader.ReadString();
			result.Unknown4 = reader.ReadString();
			result.Unknown5 = reader.ReadString();
			result.Unknown6 = new float[(int)((uint)12)];
			var iUnknown6 = 0;
			while (true)
			{
			    if (iUnknown6 < ((uint)12))
			    {
			        result.Unknown6[(int)iUnknown6] = reader.ReadFloat();
			        ++iUnknown6;
			    }
			    else
			    {
			        break;
			    }
			}
			return result;
        }
	}

	public class VisualModel3ChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel3Chunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E007003 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.VisualModel3Chunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new VisualModel3Chunk();
			result.Id = chunkId;
			result.Node = reader.ReadNodeReference();
			return result;
        }
	}

	public class WaypointSpecialPropertyChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.WaypointSpecialPropertyChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E009000 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.WaypointSpecialPropertyChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new WaypointSpecialPropertyChunk();
			result.Id = chunkId;
			result.Version = reader.ReadUInt32();
			if (result.Version == ((uint)1))
			{
			    result.Spawn = reader.ReadUInt32();
			}
			if (result.Version > ((uint)1))
			{
			    result.Tag = reader.ReadString();
			}
			result.Order = reader.ReadUInt32();
			return result;
        }
	}
}
