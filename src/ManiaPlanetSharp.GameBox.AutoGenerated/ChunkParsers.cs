using System;
using System.Collections.Generic;
using ManiaPlanetSharp.GameBox.Parsing.Chunks;

namespace ManiaPlanetSharp.GameBox.Parsing.ParserGeneration.AutoGenerated
{
	public static partial class AutoGeneratedParsers
	{
		public static Dictionary<Type, IParser<Chunk>> ChunkParsers { get; } = new Dictionary<Type, IParser<Chunk>> {
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.CheckpointsChunk), new CheckpointsChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.MapChunk), new MapChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.BlockSkinChunk), new BlockSkinChunkParser() },
			{ typeof(ManiaPlanetSharp.GameBox.Parsing.Chunks.WaypointSpecialPropertyChunk), new WaypointSpecialPropertyChunkParser() },
		};
	}



	public class CheckpointsChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.CheckpointsChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x03043017 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.CheckpointsChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new CheckpointsChunk();
			result.Id = chunkId;
			var CheckpointsArrayLength = reader.ReadUInt32();
			result.Checkpoints = new Checkpoint[(int)CheckpointsArrayLength];
			var iCheckpoints = 0;
			while (true)
			{
			    if (iCheckpoints < CheckpointsArrayLength)
			    {
			        result.Checkpoints[(int)iCheckpoints] = ParserFactory.GetCustomStructParser<Checkpoint>().Parse(reader);
			        ++iCheckpoints;
			    }
			    else
			    {
			        break;
			    }
			}
			return result;
        }
	}

	public class MapChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.MapChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x0304301F };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.MapChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new MapChunk();
			result.Id = chunkId;
			result.Uid = reader.ReadLookbackString();
			result.Environment = reader.ReadLookbackString();
			result.Author = reader.ReadLookbackString();
			result.Name = reader.ReadString();
			result.TimeOfDay = reader.ReadLookbackString();
			result.DecorationEnvironment = reader.ReadLookbackString();
			result.DecorationEnvironmentAuthor = reader.ReadLookbackString();
			result.Size = reader.ReadSize3D();
			result.NeedsUnlock = reader.ReadBool();
			result.Version = reader.ReadUInt32();
			result.Blocks = result.ParseBlocks(reader);
			return result;
        }
	}

	public class BlockSkinChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.BlockSkinChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x03059000, 0x03059001, 0x03059002 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.BlockSkinChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new BlockSkinChunk();
			result.Id = chunkId;
			if (result.ChunkId == ((uint)0))
			{
			    result.Ignored = reader.ReadString();
			}
			if (result.ChunkId >= ((uint)1))
			{
			    result.Pack = reader.ReadFileReference();
			}
			if (result.ChunkId >= ((uint)2))
			{
			    result.ParentPack = reader.ReadFileReference();
			}
			return result;
        }
	}

	public class WaypointSpecialPropertyChunkParser
		: PregeneratedChunkParser<ManiaPlanetSharp.GameBox.Parsing.Chunks.WaypointSpecialPropertyChunk>
	{
		public override List<uint> ParseableIds => new List<uint>() { 0x2E009000 };

        public override ManiaPlanetSharp.GameBox.Parsing.Chunks.WaypointSpecialPropertyChunk Parse(GameBoxReader reader, uint chunkId)
        {
			var result = new WaypointSpecialPropertyChunk();
			result.Id = chunkId;
			result.Version = reader.ReadUInt32();
			if (result.Version == ((uint)1))
			{
			    result.Spawn = reader.ReadUInt32();
			}
			if (result.Version > ((uint)1))
			{
			    result.Tag = reader.ReadString();
			}
			result.Order = reader.ReadUInt32();
			return result;
        }
	}
}
