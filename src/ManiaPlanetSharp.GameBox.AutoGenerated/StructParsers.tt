<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="$(TargetDir)ManiaPlanetSharp.GameBox.AutoGenerationHelper.dll" #>
<#@ assembly name="$(TargetDir)ManiaPlanetSharp.dll" #>
<#@ assembly name="$(ProjectDir)..\packages\AgileObjects.ReadableExpressions.2.3.2\lib\netstandard1.0\AgileObjects.ReadableExpressions.dll" #>
<#@ assembly name="$(ProjectDir)..\packages\AgileObjects.NetStandardPolyfills.1.4.0\lib\netstandard1.0\AgileObjects.NetStandardPolyfills.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ManiaPlanetSharp.GameBox" #>
<#@ import namespace="ManiaPlanetSharp.GameBox.Parsing" #>
<#@ import namespace="ManiaPlanetSharp.GameBox.Parsing.ParserGeneration" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using ManiaPlanetSharp.GameBox.Parsing.Chunks;

namespace ManiaPlanetSharp.GameBox.Parsing.ParserGeneration.AutoGenerated
{
	public static partial class AutoGeneratedParsers
	{
		public static Dictionary<Type, IParser<object>> StructParsers { get; } = new Dictionary<Type, IParser<object>> {
<#
var assemblies = AppDomain.CurrentDomain.GetAssemblies().Where(p => !p.IsDynamic);
var structTypes = assemblies.SelectMany(a => a.GetExportedTypes().Where(t => t.GetCustomAttribute<CustomStructAttribute>() != null));
foreach (var structType in structTypes)
{
#>			{ typeof(<#= structType #>), new <#= structType.Name #>Parser() },
<#
}
#>
		};
	}


<#
foreach (var structType in structTypes)
{
	string code = (string)typeof(ParserCodeGenerator).GetMethod(nameof(ParserCodeGenerator.GenerateCustomStructParserCode), BindingFlags.Static | BindingFlags.Public).MakeGenericMethod(structType).Invoke(null, null);
#>

	public class <#= structType.Name #>Parser
		: PregeneratedCustomStructParser<<#= structType #>>
	{
        public override <#= structType #> Parse(GameBoxReader reader)
        {
<#= string.Join(Environment.NewLine, code/*.Replace(structType.Name, structType.FullName)*/.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Select(line => $"\t\t\t{line}")) #>
        }
	}
<#
}
#>
}
